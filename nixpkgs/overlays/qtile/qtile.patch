diff --git a/bin/qshell b/bin/qshell
index 2ba7e61c..0ac2a2ef 100755
--- a/bin/qshell
+++ b/bin/qshell
@@ -28,5 +28,6 @@ base_dir = os.path.abspath(os.path.join(this_dir, ".."))
 sys.path.insert(0, base_dir)
 
 if __name__ == '__main__':
+    __import__("importlib").import_module("libqtile.utils").restore_os_environment()
     from libqtile.scripts import qshell
     qshell.main()
diff --git a/bin/qtile b/bin/qtile
index 3e82814d..335b5cea 100755
--- a/bin/qtile
+++ b/bin/qtile
@@ -29,5 +29,6 @@ base_dir = os.path.abspath(os.path.join(this_dir, ".."))
 sys.path.insert(0, base_dir)
 
 if __name__ == '__main__':
+    __import__("importlib").import_module("libqtile.utils").restore_os_environment()
     from libqtile.scripts import qtile
     qtile.main()
diff --git a/bin/qtile-run b/bin/qtile-run
index e4b121be..1c203bc9 100755
--- a/bin/qtile-run
+++ b/bin/qtile-run
@@ -8,5 +8,6 @@ base_dir = os.path.abspath(os.path.join(this_dir, ".."))
 sys.path.insert(0, base_dir)
 
 if __name__ == '__main__':
+    __import__("importlib").import_module("libqtile.utils").restore_os_environment()
     from libqtile.scripts import qtile_run
     qtile_run.main()
diff --git a/bin/qtile-top b/bin/qtile-top
index 5316e0e7..272c6430 100755
--- a/bin/qtile-top
+++ b/bin/qtile-top
@@ -8,5 +8,6 @@ base_dir = os.path.abspath(os.path.join(this_dir, ".."))
 sys.path.insert(0, base_dir)
 
 if __name__ == '__main__':
+    __import__("importlib").import_module("libqtile.utils").restore_os_environment()
     from libqtile.scripts import qtile_top
     qtile_top.main()
diff --git a/libqtile/core/manager.py b/libqtile/core/manager.py
index f129ffd3..03efb7d1 100644
--- a/libqtile/core/manager.py
+++ b/libqtile/core/manager.py
@@ -1441,7 +1441,7 @@ class Qtile(command.CommandObject):
             logger.error("Unable to pickle qtile state")
         argv = [s for s in argv if not s.startswith('--with-state')]
         argv.append('--with-state=' + buf.getvalue().decode())
-        self._restart = (sys.executable, argv)
+        self._restart = (os.environ.get("QTILE_WRAPPER", "@out@/bin/qtile"), argv[1:])
         self.stop()
 
     def cmd_spawn(self, cmd):
diff --git a/libqtile/core/xcursors.py b/libqtile/core/xcursors.py
index 0f1cd21e..6acf3a90 100644
--- a/libqtile/core/xcursors.py
+++ b/libqtile/core/xcursors.py
@@ -107,7 +107,7 @@ class Cursors(dict):
 
     def _setup_xcursor_binding(self):
         try:
-            xcursor = ffi.dlopen('libxcb-cursor.so.0')
+            xcursor = ffi.dlopen('@xcb-cursor@/lib/libxcb-cursor.so')
         except OSError:
             logger.warning("xcb-cursor not found, fallback to font pointer")
             return False
diff --git a/libqtile/pangocffi.py b/libqtile/pangocffi.py
index 2e2aa84d..563429ea 100644
--- a/libqtile/pangocffi.py
+++ b/libqtile/pangocffi.py
@@ -52,9 +52,9 @@ try:
 except ImportError:
     raise ImportError("No module named libqtile._ffi_pango, be sure to run `./scripts/ffibuild`")
 
-gobject = ffi.dlopen('libgobject-2.0.so.0')
-pango = ffi.dlopen('libpango-1.0.so.0')
-pangocairo = ffi.dlopen('libpangocairo-1.0.so.0')
+gobject = ffi.dlopen('@glib@/lib/libgobject-2.0.so.0')
+pango = ffi.dlopen('@pango@/lib/libpango-1.0.so.0')
+pangocairo = ffi.dlopen('@pango@/lib/libpangocairo-1.0.so.0')
 
 
 def patch_cairo_context(cairo_t):
diff --git a/libqtile/utils.py b/libqtile/utils.py
index bd5aac2b..299a4d19 100644
--- a/libqtile/utils.py
+++ b/libqtile/utils.py
@@ -193,3 +193,11 @@ def safe_import(module_names, class_name, globals_, fallback=None):
         logger.debug("%s", traceback.format_exc())
         if fallback:
             globals_[class_name] = fallback(module_path, class_name, error)
+
+
+def restore_os_environment():
+    pythonpath = os.environ.pop("QTILE_SAVED_PYTHONPATH", "")
+    os.environ["PYTHONPATH"] = pythonpath
+    path = os.environ.pop("QTILE_SAVED_PATH", None)
+    if path:
+        os.environ["PATH"] = path
